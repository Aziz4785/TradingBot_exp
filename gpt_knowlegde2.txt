Account & Portfolio Data:
The IBApi.EClient.reqAccountSummary method creates a subscription for the account data displayed in the TWS Account Summary window. It is commonly used with multiple-account structures. Introducing broker (IBroker) accounts with more than 50 subaccounts or configured for on-demand account lookup cannot use reqAccountSummary with group=”All”. A profile name can be accepted in place of group. See Unification of Groups and Profiles.

The TWS offers a comprehensive overview of your account and portfolio through its Account and Portfolio windows. This information can be obtained via the TWS API through three different kind of requests/operations.

Account SummaryCopy 
The initial invocation of reqAccountSummary will result in a list of all requested values being returned, and then every three minutes those values which have changed will be returned. The update frequency of 3 minutes is the same as the TWS Account Window and cannot be changed.
Requesting Account SummaryCopy 
Requests a specific account’s summary. This method will subscribe to the account summary as presented in the TWS’ Account Summary tab. Customers can specify the data received by using a specific tags value. See the Account Summary Tags section for available options.

Alternatively, many languages offer the import of AccountSummaryTags with a method to retrieve all tag values.

EClient.reqAccountSummary (
reqId: int. The unique request identifier.

group: String. set to “All” to return account summary data for all accounts, or set to a specific Advisor Account Group name that has already been created in TWS Global Configuration.

tags: String. A comma separated list with the desired tags

)

Important: only two active summary subscriptions are allowed at a time!
self.reqAccountSummary(9001, "All", AccountSummaryTags.AllTags)


Code example:
from ibapi.client import *
from ibapi.wrapper import *
from ibapi.contract import Contract
import time

class TradeApp(EWrapper, EClient): 
    def __init__(self): 
        EClient.__init__(self, self) 

    def accountSummary(self, reqId: int, account: str, tag: str, value: str,currency: str):
        print("AccountSummary. ReqId:", reqId, "Account:", account,"Tag: ", tag, "Value:", value, "Currency:", currency)
    
    def accountSummaryEnd(self, reqId: int):
        print("AccountSummaryEnd. ReqId:", reqId)
    
app = TradeApp()      
app.connect("127.0.0.1", 7496, clientId=1)

time.sleep(1)

app.reqAccountSummary(9001, "All", 'NetLiquidation')
app.run()
Account Summary TagsCopy 
AccountType	Identifies the IB account structure
NetLiquidation	The basis for determining the price of the assets in your account. Total cash value + stock value + options value + bond value
TotalCashValue	Total cash balance recognized at the time of trade + futures PNL
SettledCash	Cash recognized at the time of settlement – purchases at the time of trade – commissions – taxes – fees
AccruedCash	Total accrued cash value of stock, commodities and securities
BuyingPower	Buying power serves as a measurement of the dollar value of securities that one may purchase in a securities account without depositing additional funds
EquityWithLoanValue	Forms the basis for determining whether a client has the necessary assets to either initiate or maintain security positions. Cash + stocks + bonds + mutual funds
PreviousEquityWithLoanValue	Marginable Equity with Loan value as of 16:00 ET the previous day
GrossPositionValue	The sum of the absolute value of all stock and equity option positions
RegTEquity	Regulation T equity for universal account
RegTMargin	Regulation T margin for universal account
SMA	Special Memorandum Account: Line of credit created when the market value of securities in a Regulation T account increase in value
InitMarginReq	Initial Margin requirement of whole portfolio
MaintMarginReq	Maintenance Margin requirement of whole portfolio
AvailableFunds	This value tells what you have available for trading
ExcessLiquidity	This value shows your margin cushion, before liquidation
Cushion	Excess liquidity as a percentage of net liquidation value
FullInitMarginReq	Initial Margin of whole portfolio with no discounts or intraday credits
FullMaintMarginReq	Maintenance Margin of whole portfolio with no discounts or intraday credits
FullAvailableFunds	Available funds of whole portfolio with no discounts or intraday credits
FullExcessLiquidity	Excess liquidity of whole portfolio with no discounts or intraday credits
LookAheadNextChange	Time when look-ahead values take effect
LookAheadInitMarginReq	Initial Margin requirement of whole portfolio as of next period’s margin change
LookAheadMaintMarginReq	Maintenance Margin requirement of whole portfolio as of next period’s margin change
LookAheadAvailableFunds	This value reflects your available funds at the next margin change
LookAheadExcessLiquidity	This value reflects your excess liquidity at the next margin change
HighestSeverity	A measure of how close the account is to liquidation
DayTradesRemaining	The Number of Open/Close trades a user could put on before Pattern Day Trading is detected. A value of “-1” means that the user can put on unlimited day trades.
Leverage	GrossPositionValue / NetLiquidation
$LEDGER	Single flag to relay all cash balance tags*, only in base currency.
$LEDGER:CURRENCY	Single flag to relay all cash balance tags*, only in the specified currency.
$LEDGER:ALL	Single flag to relay all cash balance tags* in all currencies.

Receiving Account Summary:
EWrapper.accountSummary (
reqId: int. the request’s unique identifier.

account: String. the account id

tag: String. the account’s attribute being received.

value: String. the account’s attribute’s value.

currency: String. the currency on which the value is expressed.

)

Receives the account information. This method will receive the account information just as it appears in the TWS’ Account Summary Window.

Python
Java
C++
C#
VB.NET
def accountSummary(self, reqId: int, account: str, tag: str, value: str,currency: str):
  print("AccountSummary. ReqId:", reqId, "Account:", account,"Tag: ", tag, "Value:", value, "Currency:", currency)
EWrapper.accountSummaryEnd(
reqId: String. The request’s identifier.

)

Notifies when all the accounts’ information has ben received. Requires TWS 967+ to receive accountSummaryEnd in linked account structures.
def accountSummary(self, reqId: int, account: str, tag: str, value: str,currency: str):
  print("AccountSummary. ReqId:", reqId, "Account:", account,"Tag: ", tag, "Value:", value, "Currency:", currency)

def accountSummaryEnd(self, reqId: int):
    print("AccountSummaryEnd. ReqId:", reqId)

Cancel Account SummaryCopy 
Once the subscription to account summary is no longer needed, it can be cancelled via the IBApi::EClient::cancelAccountSummary method:

EClient.cancelAccountSummary (
reqId: int. The identifier of the previously performed account request

)
self.cancelAccountSummary(9001)